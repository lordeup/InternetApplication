// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

namespace Server.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201024165008_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Server.Models.Movie", b =>
                {
                    b.Property<int>("IdMovie")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_movie")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PictureUrl")
                        .HasColumnName("picture_url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("IdMovie");

                    b.ToTable("movie");
                });

            modelBuilder.Entity("Server.Models.MovieHasMovieTag", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnName("id_movie")
                        .HasColumnType("int");

                    b.Property<int>("IdMovieTag")
                        .HasColumnName("id_movie_tag")
                        .HasColumnType("int");

                    b.Property<int>("IdMovieXMovieTag")
                        .HasColumnName("id_movie_x_movie_tag")
                        .HasColumnType("int");

                    b.HasKey("IdMovie", "IdMovieTag");

                    b.HasIndex("IdMovieTag");

                    b.ToTable("movie_x_movie_tag");
                });

            modelBuilder.Entity("Server.Models.MovieRating", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnName("id_movie")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnName("id_user")
                        .HasColumnType("int");

                    b.Property<int>("IdMovieRating")
                        .HasColumnName("id_movie_rating")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnName("rating")
                        .HasColumnType("real");

                    b.HasKey("IdMovie", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("movie_rating");
                });

            modelBuilder.Entity("Server.Models.MovieTag", b =>
                {
                    b.Property<int>("IdMovieTag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_movie_tag")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("IdMovieTag");

                    b.ToTable("movie_tag");
                });

            modelBuilder.Entity("Server.Models.Review", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnName("id_movie")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnName("id_user")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdReview")
                        .HasColumnName("id_review")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMovie", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("review");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("IdUserType")
                        .HasColumnName("id_user_type")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnName("id_user")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PictureUrl")
                        .HasColumnName("picture_url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Surname")
                        .HasColumnName("surname")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("IdUserType");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Server.Models.UserType", b =>
                {
                    b.Property<int>("IdUserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_user_type")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdUserType");

                    b.ToTable("user_type");
                });

            modelBuilder.Entity("Server.Models.MovieHasMovieTag", b =>
                {
                    b.HasOne("Server.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.MovieTag", "MovieTag")
                        .WithMany()
                        .HasForeignKey("IdMovieTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.MovieRating", b =>
                {
                    b.HasOne("Server.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Review", b =>
                {
                    b.HasOne("Server.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.HasOne("Server.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("IdUserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
